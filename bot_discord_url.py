import os
import discord
import qrcode
from discord.ext import commands
from discord import app_commands
from MyServer import server_on

intents = discord.Intents.all()
intents.message_content = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents)

@bot.event
async def on_ready():
    await bot.wait_until_ready()
    synced = await bot.tree.sync()
    print(f"‚úÖ Bot {bot.user.name} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô! | ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á {len(synced)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code
def generate_qr_code(url: str, filename: str = "qrcode.png") -> str:
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data(url)
    qr.make(fit=True)

    img = qr.make_image(fill_color="black", back_color="white")
    img.save(filename)
    return filename

# ==========================
# ‚å®Ô∏è Slash command: /compiler
# ==========================
@bot.tree.command(name="compiler", description="‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏à‡∏≤‡∏Å URL")
@app_commands.describe(protocol="‡πÇ‡∏õ‡∏£‡πÇ‡∏ï‡∏Ñ‡∏≠‡∏• (http ‡∏´‡∏£‡∏∑‡∏≠ https)", url="‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code")
async def slash_compiler(interaction: discord.Interaction, protocol: str, url: str):
    if protocol not in ["http", "https"]:
        await interaction.response.send_message("‚ùå ‡πÇ‡∏õ‡∏£‡πÇ‡∏ï‡∏Ñ‡∏≠‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà `http` ‡∏´‡∏£‡∏∑‡∏≠ `https`", ephemeral=True)
        return

    full_url = f"{protocol}://{url}"

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code
    qr_filename = generate_qr_code(full_url)

    # ‡∏™‡πà‡∏á QR Code ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    file = discord.File(qr_filename, filename="qrcode.png")
    embed = discord.Embed(
        title="üîó QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö URL ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
        description=f"URL: {full_url}",
        color=discord.Color.blue()
    )
    embed.set_image(url="attachment://qrcode.png")
    embed.set_footer(text="‡πÇ‡∏î‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: /compiler")
    await interaction.response.send_message(embed=embed, file=file)

# ==========================
# üìú ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !commands
# ==========================
@bot.command(name="commands")  
async def commands_cmd(ctx):
    embed = discord.Embed(
        title="üÜò ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó:",
        description="‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó",
        color=discord.Color.orange()
    )
    embed.add_field(name="/compiler [protocol] [URL]", value="‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏à‡∏≤‡∏Å URL (Slash command).", inline=False)
    embed.set_footer(text="‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏ö‡∏≠‡∏ó.")
    await ctx.send(embed=embed)

# ==========================
# üìú Slash command: /commands 
# ==========================
@bot.tree.command(name="commands", description="‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á")
async def slash_commands(interaction: discord.Interaction):
    embed = discord.Embed(
        title="üÜò ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó:",
        description="‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó",
        color=discord.Color.orange()
    )
    embed.add_field(name="/compiler [protocol] [URL]", value="‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏à‡∏≤‡∏Å URL (Slash command).", inline=False)
    embed.set_footer(text="‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏ö‡∏≠‡∏ó.")
    await interaction.response.send_message(embed=embed)

# ==========================
# Add the protocol choices to the command
# ==========================
@slash_compiler.autocomplete('protocol')
async def protocol_autocomplete(interaction: discord.Interaction, current: str):
    choices = ['http', 'https']
    return [app_commands.Choice(name=choice, value=choice) for choice in choices if current.lower() in choice.lower()]

server_on()
bot.run(os.getenv("TOKEN"))
